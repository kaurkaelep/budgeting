{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getTransactions","data","transactions","Number","idx","transactionValue","replace","isNaN","toFixed","getFilteredIndexees","process","SEB_CLIENT_SECRET","TableHeader","className","map","head","index","TableRow","cell","App","useState","csv","setCSV","isSubmitting","setIsSubmitting","errors","meta","type","onClick","axios","url","method","params","response_type","redirect_uri","scope","client_id","then","res","console","log","catch","err","error","onChange","event","file","target","files","Papa","parse","complete","result","header","style","height","row","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQA+FMA,EAAkB,SAACC,GAAU,IAAD,EAC5BC,EAAeC,OAAO,GAC1B,IAAK,IAAMC,KAAOH,EAAM,CAAC,IAAD,EAChBI,GAAmB,UAAAJ,EAAKG,GAAK,UAAV,eAAcE,QAAQ,IAAK,OAAQ,KAC5D,IAAKC,MAAMF,GAETH,GAAgBC,OADME,GAI1B,MAAM,GAAN,OAAUH,EAAY,oBAAMA,SAAN,aAAM,EAAcM,QAAQ,GAA5B,WAAqC,QA4FvDC,GAzFoBC,6IAAYC,kBAyFV,SAACV,EAAMG,GACjC,OAAY,IAARA,IACQ,IAARA,IACQ,IAARA,IACQ,IAARA,IACQ,IAARA,IACQ,IAARA,IACQ,KAARA,IACQ,KAARA,IACQ,KAARA,GACQ,KAARA,YAaAQ,EAAc,SAAC,GAAc,IAAZX,EAAW,EAAXA,KACrB,OACE,qBAAKY,UAAU,cAAf,SACGZ,EAAKa,KAAI,SAACC,EAAMC,GAEf,OADoBP,EAAoBM,EAAMC,GACtB,KACjB,sBAAMH,UAAU,mBAAhB,SAAoCE,UAM7CE,EAAW,SAAC,GAAc,IAAZhB,EAAW,EAAXA,KAClB,OACE,qBAAKY,UAAU,WAAf,SACGZ,EAAKa,KAAI,SAACI,EAAMF,GAEf,OADoBP,EAAoBS,EAAMF,GACtB,KACjB,sBAAMH,UAAU,gBAAhB,SAAiCK,UAMjCC,EArIH,WAAO,IAAD,EACMC,mBAAS,IADf,mBACTC,EADS,KACJC,EADI,OAEwBF,oBAAS,GAFjC,mBAETG,EAFS,KAEKC,EAFL,OAGeH,GAAO,GAA9BpB,EAHQ,EAGRA,KAHQ,EAGFwB,OAHE,EAGMC,KAoDtB,OACE,sBAAKb,UAAU,MAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,wBAAQc,KAAK,SAASC,QArDD,WAIzBC,IAAM,CAEJC,IAAK,mEACLC,OAAQ,MACRC,OAAQ,CACNC,cAAe,OACfC,aAAc,yCACdC,MAAO,6BACPC,UAnBsB,0BAsBvBC,MAAK,SAACC,GACLC,QAAQC,IAAR,MAAmBF,MAEpBG,OAAM,SAACC,GACNH,QAAQI,MAAM,MAAOD,OAkCrB,iBAGA,uBAAOf,KAAK,OAAOiB,SAjCA,SAACC,GACxBrB,GAAgB,GAChB,IAAMsB,EAAOD,EAAME,OAAOC,MAAM,GAChCC,IAAKC,MAAMJ,EAAM,CACfK,SAAU,SAACC,GAeTb,QAAQC,IAAR,SAAsBY,GACtB9B,EAAO8B,GACP5B,GAAgB,IAElB6B,QAAQ,OAWL9B,GAAgB,8CAEnB,qBAAK+B,MAAO,CAAEC,OAAQ,UACtB,sBAAK1C,UAAU,iBAAf,UACGZ,GACC,8BACE,wDACwB,iCAASD,EAAgBC,UAIrD,qBAAKqD,MAAO,CAAEC,OAAQ,UACrBtD,GACCA,EAAKa,KAAI,SAAC0C,EAAKC,GACb,OAAU,IAANA,EAAgB,cAAC,EAAD,CAAaxD,KAAMuD,IAGhC,cAAC,EAAD,CAAUvD,KAAMuD,cCjLpBE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c224f056.chunk.js","sourcesContent":["import \"./App.css\";\nimport Papa from \"papaparse\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport dayjs from \"dayjs\";\n\nconst getDate = (str) => {\n  // päev.kuu.aasta\n  const split = str.split(\".\");\n  const [day, month, year] = split;\n  return new Date(year, month, day);\n};\n\nconst createSortedRows = (rows) => {\n  const newRows = rows.filter((row, idx) => {\n    if (idx !== 0) return true;\n  });\n  newRows.forEach((row) => {\n    if (row.length <= 1) return null;\n    return row;\n  });\n\n  const testRows = newRows.map((row) => {\n    return row.map((item, index) => {\n      let value = item;\n      if (index === 2) {\n        const newDate = getDate(value);\n        value = newDate;\n      }\n      return value;\n    });\n\n    return row;\n  });\n\n  const sortedDateGroups = testRows.map((dateGroup) => {\n    console.log(`dateGroup`, dateGroup);\n    const dateGroups = dateGroup.map((el) => {\n      if (typeof el === \"object\") return el;\n\n      console.log(`el`, typeof el);\n    });\n    return dateGroup;\n  }); /* .sort(function(a,b) {\n    // sort the outer groups\n    return a[0].date.getTime() - b[0].date.getTime();\n  }); */\n  console.log(`sortedDateGroups`, sortedDateGroups);\n\n  /* let sortedRows = [];\n  for (const index in testRows) {\n    const row = testRows[index];\n\n    console.log(`row`, row);\n  } */\n\n  console.log(`testRows`, testRows);\n  /*   const sortedRows = testRows.sort(\n    (firstDateArr, secondDateArr) =>\n      new Date(firstDateArr[2]) - new Date(secondDateArr[2])\n  );\n  console.log(`sortedRows`, sortedRows); */\n  return rows;\n};\n\nconst getDateFromString = (str) => {\n  const date = getDate(str);\n  return new Date(\n    /* dayjs(date).subtract(1, \"month\").format(\"DD.MM.YY\") */ date\n  );\n};\n\nconst getSortedRowData = (row) => {\n  // First we sort\n  const data = row.map((el, i) => {\n    // Date\n    if (i == 2) {\n      return getDateFromString(el);\n    }\n    return el;\n  });\n  return data;\n};\n\nconst isDate = (date) => {\n  return new Date(date) !== \"Invalid Date\" && !isNaN(new Date(date));\n};\n\nconst getSortedDates = (dates) => {\n  /*   for (const date of dates) {\n    console.log(`date`, date);\n  } */\n  return dates;\n};\n\nconst getTransactions = (data) => {\n  let transactions = Number(0);\n  for (const idx in data) {\n    const transactionValue = data[idx][8]?.replace(/,/, \".\") || null;\n    if (!isNaN(transactionValue)) {\n      const numberToPoint = transactionValue;\n      transactions += Number(numberToPoint);\n    }\n  }\n  return `${transactions ? `${transactions?.toFixed(2)} €` : \"N/A\"}`;\n};\n\nconst SEB_CLIENT_SECRET = process.env.SEB_CLIENT_SECRET;\nconst SEB_SANDBOX_CLIENT_ID = \"1N7poTNWMqZ5AphP1tBv\";\n\nconst App = () => {\n  const [csv, setCSV] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { data, errors, meta } = csv || {};\n\n  const getSEBTransactions = () => {\n    //api-sandbox.sebgroup.com/ais/v7/identified2/accounts/{accountId}/transactions\n    const token = \"\";\n    const sesskey = \"bnlakcalDdEcyMacflcfhnHgXkpblubB\";\n    axios({\n      //url: `https://api-sandbox.sebgroup.com/mga/sps/oauth/oauth20/authorize`,\n      url: \"https://api-sandbox.sebgroup.com/mga/sps/oauth/oauth20/authorize\",\n      method: \"GET\",\n      params: {\n        response_type: \"code\",\n        redirect_uri: \"https://kaurkaelep.github.io/budgeting\",\n        scope: \"psd_accounts psd2_payments\",\n        client_id: SEB_SANDBOX_CLIENT_ID,\n      },\n    })\n      .then((res) => {\n        console.log(`res`, res);\n      })\n      .catch((err) => {\n        console.error(\"err\", err);\n      });\n  };\n\n  const handleFileUpload = (event) => {\n    setIsSubmitting(true);\n    const file = event.target.files[0];\n    Papa.parse(file, {\n      complete: (result) => {\n        /* const newData = result.data.map((item, idx) => {\n          const convertedToDates = item.map((el, idx) => {\n            if (idx === 2) {\n              const date = getDate(el);\n              if (isDate(date)) return date;\n              return el;\n            }\n            return el;\n          });\n\n          const sortedByDate = getSortedDates(convertedToDates);\n\n          console.log(`sortedByDate`, sortedByDate);\n        }); */\n        console.log(`result`, result);\n        setCSV(result);\n        setIsSubmitting(false);\n      },\n      header: false,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"file-container\">\n        <button type=\"button\" onClick={getSEBTransactions}>\n          SEB\n        </button>\n        <input type=\"file\" onChange={handleFileUpload} />\n        {isSubmitting && <p>Loading...</p>}\n      </div>\n      <div style={{ height: \"50px\" }}></div>\n      <div className=\"data-container\">\n        {data && (\n          <div>\n            <h3>\n              Transaktsioone kokku: <strong>{getTransactions(data)}</strong>\n            </h3>\n          </div>\n        )}\n        <div style={{ height: \"50px\" }}></div>\n        {data &&\n          data.map((row, i) => {\n            if (i === 0) return <TableHeader data={row} />;\n            //const rowData = getSortedRowData(row);\n\n            return <TableRow data={row} />;\n          })}\n      </div>\n    </div>\n  );\n};\n\nconst getFilteredIndexees = (data, idx) => {\n  if (idx === 0) return true;\n  if (idx === 1) return true;\n  if (idx === 3) return true;\n  if (idx === 5) return true;\n  if (idx === 7) return true;\n  if (idx === 9) return true;\n  if (idx === 10) return true;\n  if (idx === 12) return true;\n  if (idx === 13) return true;\n  if (idx === 14) return true;\n  return false;\n};\n\n// TODO: CHeck if you can automatically fetch by login to your bank\n\n// ACC NUMBERS EE491010031732677223,EE621010010338049014\n\n// start_date=01.04.2021&end_date=29.04.2021\n\n// https://e.seb.ee/cgi-bin/ipank/ipank.pdf?sesskey=lAjqbwfkciafiilkflcfhnHgXkpblubB&aken=NONSESSION&act=STATEMENT1_CSV_UTF8&acc_no=EE491010031732677223,EE621010010338049014&dc_value=0&vv_sort_id=MS&vv_type_id=&filter_saajakonto=&filter_tp_id=0&filter_txt_id=0&sort_order_id=descending&start_date=01.04.2021&end_date=29.04.2021&vv_iban=y&val_id=99,99,99\n// https://e.seb.ee/cgi-bin/ipank/ipank.pdf?aken=NONSESSION&act=STATEMENT1_CSV_UTF8&acc_no=EE491010031732677223,EE621010010338049014&start_date=01.04.2021&end_date=29.04.2021&vv_iban=y&val_id=99,99,99\n\nconst TableHeader = ({ data }) => {\n  return (\n    <div className=\"data-header\">\n      {data.map((head, index) => {\n        const isSkippable = getFilteredIndexees(head, index);\n        if (isSkippable) return null;\n        return <span className=\"data-header-item\">{head}</span>;\n      })}\n    </div>\n  );\n};\n\nconst TableRow = ({ data }) => {\n  return (\n    <div className=\"data-row\">\n      {data.map((cell, index) => {\n        const isSkippable = getFilteredIndexees(cell, index);\n        if (isSkippable) return null;\n        return <span className=\"data-row-item\">{cell}</span>;\n      })}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}